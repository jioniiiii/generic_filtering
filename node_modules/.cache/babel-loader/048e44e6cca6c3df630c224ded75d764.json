{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  '18': [{\n    'type': 'Flood and sea level rise > Coastal flood',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Storm surge',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '159': [{\n    'type': 'Biological hazards > Vector-borne disease',\n    'probability': 'Medium Low',\n    'magnitude': 'High'\n  }, {\n    'type': 'Wild fire > Forest fire',\n    'probability': 'Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme cold temperature > Cold wave',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Severe wind',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Mass movement > Subsidence',\n    'probability': 'Medium',\n    'magnitude': 'Medium Low'\n  }, {\n    'type': 'Extreme cold temperature > Extreme cold days',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Flood and sea level rise > River flood',\n    'probability': 'Medium',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Water Scarcity > Drought',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '163': [{\n    'type': 'Flood and sea level rise > Flash / surface flood',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'High',\n    'magnitude': 'High'\n  }]\n};\nconst cities_coordinates = {\n  '18': {\n    'lat': 55.67613,\n    'lng': 12.56571\n  },\n  '159': {\n    'lat': 48.8787676,\n    'lng': 2.3222643\n  },\n  '163': {\n    'lat': 50.8705213,\n    'lng': 7.069748\n  }\n};\nexport default function App() {\n  _s();\n\n  // Initialize states with empty arrays for filters\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({}); // Filter cities based on selected criteria\n\n  useEffect(() => {\n    const filteredResult = {}; // Loop through each city in the data\n\n    Object.entries(data).forEach(_ref => {\n      let [cityId, hazards] = _ref;\n      let includeCity = true; // Check hazard types\n\n      if (typeFilters.length > 0) {\n        const hasMatchingType = hazards.some(hazard => typeFilters.includes(hazard.type));\n        if (!hasMatchingType) includeCity = false;\n      } // Check probability\n\n\n      if (probabilityFilters.length > 0) {\n        const hasMatchingProbability = hazards.some(hazard => probabilityFilters.includes(hazard.probability));\n        if (!hasMatchingProbability) includeCity = false;\n      } // Check magnitude\n\n\n      if (magnitudeFilters.length > 0) {\n        const hasMatchingMagnitude = hazards.some(hazard => magnitudeFilters.includes(hazard.magnitude));\n        if (!hasMatchingMagnitude) includeCity = false;\n      } // If city matches all criteria, add it to results\n\n\n      if (includeCity) {\n        filteredResult[cityId] = { ...cities_coordinates[cityId],\n          name: cityId // Adding name for tooltip\n\n        };\n      }\n    });\n    setFilteredCities(filteredResult);\n  }, [typeFilters, magnitudeFilters, probabilityFilters]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Hazard Filter\",\n        filterOptions: HAZARDTYPES,\n        filters: typeFilters,\n        setFilters: setTypeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Probability Filter\",\n        filterOptions: PROBABILITY,\n        filters: probabilityFilters,\n        setFilters: setProbabilityFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Magnitude Filter\",\n        filterOptions: MAGNITUDE,\n        filters: magnitudeFilters,\n        setFilters: setMagnitudeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        data: filtered_cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 37\n  }, this);\n}\n\n_s(App, \"ihFadl6AJ/nSp2swA4l8KBANGEc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/App.js"],"names":["React","useEffect","useState","Grid","Map","SelectMultiple","HAZARDTYPES","PROBABILITY","MAGNITUDE","data","cities_coordinates","App","typeFilters","setTypeFilters","magnitudeFilters","setMagnitudeFilters","probabilityFilters","setProbabilityFilters","filtered_cities","setFilteredCities","filteredResult","Object","entries","forEach","cityId","hazards","includeCity","length","hasMatchingType","some","hazard","includes","type","hasMatchingProbability","probability","hasMatchingMagnitude","magnitude","name"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Grid} from '@material-ui/core'\nimport {Map} from './Map'\nimport {SelectMultiple} from './SelectMultiple'\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\n\nconst data = {'18': [\n                    {'type': 'Flood and sea level rise > Coastal flood', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Storm surge', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n              '159': [\n                    {'type': 'Biological hazards > Vector-borne disease', 'probability': 'Medium Low', 'magnitude': 'High'}, \n                    {'type': 'Wild fire > Forest fire', 'probability': 'Low', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme cold temperature > Cold wave', 'probability': 'Medium Low', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Severe wind', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Mass movement > Subsidence', 'probability': 'Medium', 'magnitude': 'Medium Low'}, \n                    {'type': 'Extreme cold temperature > Extreme cold days', 'probability': 'Medium Low', 'magnitude': 'Medium High'}, \n                    {'type': 'Flood and sea level rise > River flood', 'probability': 'Medium', 'magnitude': 'High'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Water Scarcity > Drought', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}], \n              '163': [\n                    {'type': 'Flood and sea level rise > Flash / surface flood', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n            }\nconst cities_coordinates = {'18':  {'lat': 55.67613, 'lng': 12.56571},\n                            '159': {'lat': 48.8787676, 'lng': 2.3222643},\n                            '163': {'lat': 50.8705213, 'lng': 7.069748}\n                            }\n\n\n                            export default function App() {\n                                // Initialize states with empty arrays for filters\n                                const [typeFilters, setTypeFilters] = useState([])\n                                const [magnitudeFilters, setMagnitudeFilters] = useState([])\n                                const [probabilityFilters, setProbabilityFilters] = useState([])\n                                const [filtered_cities, setFilteredCities] = useState({})\n                            \n                                // Filter cities based on selected criteria\n                                useEffect(() => {\n                                    const filteredResult = {}\n                                    \n                                    // Loop through each city in the data\n                                    Object.entries(data).forEach(([cityId, hazards]) => {\n                                        let includeCity = true\n                                        \n                                        // Check hazard types\n                                        if (typeFilters.length > 0) {\n                                            const hasMatchingType = hazards.some(hazard => \n                                                typeFilters.includes(hazard.type)\n                                            )\n                                            if (!hasMatchingType) includeCity = false\n                                        }\n                                        \n                                        // Check probability\n                                        if (probabilityFilters.length > 0) {\n                                            const hasMatchingProbability = hazards.some(hazard => \n                                                probabilityFilters.includes(hazard.probability)\n                                            )\n                                            if (!hasMatchingProbability) includeCity = false\n                                        }\n                                        \n                                        // Check magnitude\n                                        if (magnitudeFilters.length > 0) {\n                                            const hasMatchingMagnitude = hazards.some(hazard => \n                                                magnitudeFilters.includes(hazard.magnitude)\n                                            )\n                                            if (!hasMatchingMagnitude) includeCity = false\n                                        }\n                                        \n                                        // If city matches all criteria, add it to results\n                                        if (includeCity) {\n                                            filteredResult[cityId] = {\n                                                ...cities_coordinates[cityId],\n                                                name: cityId // Adding name for tooltip\n                                            }\n                                        }\n                                    })\n                                    \n                                    setFilteredCities(filteredResult)\n                                }, [typeFilters, magnitudeFilters, probabilityFilters])\n                            \n                                return (\n                                    <Grid container>\n                                        <Grid item lg={2}>\n                                            <SelectMultiple \n                                                filterType=\"Hazard Filter\" \n                                                filterOptions={HAZARDTYPES} \n                                                filters={typeFilters}\n                                                setFilters={setTypeFilters}\n                                            />\n                                        </Grid>\n                                        <Grid item lg={2}>\n                                            <SelectMultiple \n                                                filterType=\"Probability Filter\" \n                                                filterOptions={PROBABILITY} \n                                                filters={probabilityFilters}\n                                                setFilters={setProbabilityFilters}\n                                            />\n                                        </Grid>\n                                        <Grid item lg={2}>\n                                            <SelectMultiple \n                                                filterType=\"Magnitude Filter\" \n                                                filterOptions={MAGNITUDE} \n                                                filters={magnitudeFilters}\n                                                setFilters={setMagnitudeFilters}\n                                            />\n                                        </Grid>\n                                        <Grid item lg={12}>\n                                            <Map data={filtered_cities}/>\n                                        </Grid>\n                                    </Grid>\n                                );\n                            }\n"]},"metadata":{},"sourceType":"module"}