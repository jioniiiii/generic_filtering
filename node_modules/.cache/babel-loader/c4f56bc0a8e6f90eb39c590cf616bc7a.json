{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  '18': [{\n    'type': 'Flood and sea level rise > Coastal flood',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Storm surge',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '159': [{\n    'type': 'Biological hazards > Vector-borne disease',\n    'probability': 'Medium Low',\n    'magnitude': 'High'\n  }, {\n    'type': 'Wild fire > Forest fire',\n    'probability': 'Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme cold temperature > Cold wave',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium'\n  } // More data...\n  ],\n  '163': [{\n    'type': 'Flood and sea level rise > Flash / surface flood',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'High',\n    'magnitude': 'High'\n  }]\n};\nconst cities_coordinates = {\n  '18': {\n    'lat': 55.67613,\n    'lng': 12.56571,\n    name: 'City A'\n  },\n  '159': {\n    'lat': 48.8787676,\n    'lng': 2.3222643,\n    name: 'City B'\n  },\n  '163': {\n    'lat': 50.8705213,\n    'lng': 7.069748,\n    name: 'City C'\n  }\n};\nexport default function App() {\n  _s();\n\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n  useEffect(() => {\n    const applyFilters = () => {\n      const filteredCities = Object.entries(data).reduce((result, _ref) => {\n        let [cityId, hazards] = _ref;\n        const matches = hazards.every(hazard => {\n          const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type);\n          const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.includes(hazard.magnitude);\n          const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.includes(hazard.probability);\n          return matchesType && matchesMagnitude && matchesProbability;\n        });\n\n        if (matches) {\n          result[cityId] = cities_coordinates[cityId];\n        }\n\n        return result;\n      }, {});\n      setFilteredCities(filteredCities);\n    };\n\n    applyFilters();\n  }, [typeFilters, magnitudeFilters, probabilityFilters]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Hazard Filter\",\n        filterOptions: HAZARDTYPES,\n        filters: typeFilters,\n        setFilters: setTypeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Probability Filter\",\n        filterOptions: PROBABILITY,\n        filters: probabilityFilters,\n        setFilters: setProbabilityFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Magnitude Filter\",\n        filterOptions: MAGNITUDE,\n        filters: magnitudeFilters,\n        setFilters: setMagnitudeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        data: filtered_cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ihFadl6AJ/nSp2swA4l8KBANGEc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/App.js"],"names":["React","useEffect","useState","Grid","Map","SelectMultiple","HAZARDTYPES","PROBABILITY","MAGNITUDE","data","cities_coordinates","name","App","typeFilters","setTypeFilters","magnitudeFilters","setMagnitudeFilters","probabilityFilters","setProbabilityFilters","filtered_cities","setFilteredCities","applyFilters","filteredCities","Object","entries","reduce","result","cityId","hazards","matches","every","hazard","matchesType","length","includes","type","matchesMagnitude","magnitude","matchesProbability","probability"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\n\nconst data = {\n  '18': [\n    { 'type': 'Flood and sea level rise > Coastal flood', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Storm and wind > Storm surge', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Extreme hot temperature > Heat wave', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Extreme Precipitation > Rain storm', 'probability': 'High', 'magnitude': 'High' }\n  ],\n  '159': [\n    { 'type': 'Biological hazards > Vector-borne disease', 'probability': 'Medium Low', 'magnitude': 'High' },\n    { 'type': 'Wild fire > Forest fire', 'probability': 'Low', 'magnitude': 'Medium' },\n    { 'type': 'Extreme cold temperature > Cold wave', 'probability': 'Medium Low', 'magnitude': 'Medium' },\n    // More data...\n  ],\n  '163': [\n    { 'type': 'Flood and sea level rise > Flash / surface flood', 'probability': 'High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'High', 'magnitude': 'High' }\n  ],\n};\n\nconst cities_coordinates = {\n  '18': { 'lat': 55.67613, 'lng': 12.56571, name: 'City A' },\n  '159': { 'lat': 48.8787676, 'lng': 2.3222643, name: 'City B' },\n  '163': { 'lat': 50.8705213, 'lng': 7.069748, name: 'City C' }\n};\n\nexport default function App() {\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n\n  useEffect(() => {\n    const applyFilters = () => {\n      const filteredCities = Object.entries(data).reduce((result, [cityId, hazards]) => {\n        const matches = hazards.every((hazard) => {\n          const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type);\n          const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.includes(hazard.magnitude);\n          const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.includes(hazard.probability);\n          return matchesType && matchesMagnitude && matchesProbability;\n        });\n\n        if (matches) {\n          result[cityId] = cities_coordinates[cityId];\n        }\n\n        return result;\n      }, {});\n\n      setFilteredCities(filteredCities);\n    };\n\n    applyFilters();\n  }, [typeFilters, magnitudeFilters, probabilityFilters]);\n\n  return (\n    <Grid container>\n      <Grid item lg={2}>\n        <SelectMultiple filterType={\"Hazard Filter\"} filterOptions={HAZARDTYPES} filters={typeFilters} setFilters={setTypeFilters} />\n      </Grid>\n      <Grid item lg={2}>\n        <SelectMultiple filterType={\"Probability Filter\"} filterOptions={PROBABILITY} filters={probabilityFilters} setFilters={setProbabilityFilters} />\n      </Grid>\n      <Grid item lg={2}>\n        <SelectMultiple filterType={\"Magnitude Filter\"} filterOptions={MAGNITUDE} filters={magnitudeFilters} setFilters={setMagnitudeFilters} />\n      </Grid>\n      <Grid item lg={12}>\n        <Map data={filtered_cities} />\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}