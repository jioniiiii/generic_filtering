{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/SelectMultiple.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { OutlinedInput, InputLabel, MenuItem, FormControl, ListItemText, Select, Checkbox } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 400\n    }\n  }\n};\nexport function SelectMultiple(_ref) {\n  _s();\n\n  let {\n    filterType,\n    filterOptions,\n    filters,\n    group,\n    applyFilters\n  } = _ref;\n  const activeFilters = filters.map(filter => filter.name);\n  const [checked, setChecked] = useState([]); // useEffect to update the filters when checked changes\n\n  useEffect(() => {\n    // Update filters based on the checked items\n    const updatedFilters = filterOptions.filter(option => checked.includes(option));\n    setChecked(updatedFilters); // Set the checked state to the updated filters\n\n    applyFilters(); // Call applyFilters to propagate the changes\n  }, [checked, filterOptions, applyFilters]);\n\n  const handleChange = value => {\n    setChecked(prev => {\n      // Check if the item is already in the checked state\n      if (prev.includes(value)) {\n        return prev.filter(item => item !== value); // Remove it\n      } else {\n        return [...prev, value]; // Add it\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px 20px 20px 0'\n    },\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        style: {\n          paddingLeft: 10\n        },\n        children: filterType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        multiple: true,\n        value: checked // Change here to reflect checked state\n        ,\n        input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          label: filterType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 18\n        }, this),\n        renderValue: selected => selected.join(', ') // Display selected items\n        ,\n        MenuProps: MenuProps,\n        children: filterOptions.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: type,\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: checked.indexOf(type) > -1,\n            onChange: () => handleChange(type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SelectMultiple, \"ELmdrENkHyl5zQ/YRZL0bNbAd7M=\");\n\n_c = SelectMultiple;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectMultiple\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/SelectMultiple.js"],"names":["React","useEffect","useState","OutlinedInput","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","SelectMultiple","filterType","filterOptions","filters","group","applyFilters","activeFilters","map","filter","name","checked","setChecked","updatedFilters","option","includes","handleChange","value","prev","item","margin","paddingLeft","selected","join","type","indexOf"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {OutlinedInput, \n  InputLabel, \n  MenuItem, \n  FormControl, \n  ListItemText,\n  Select,\n  Checkbox,\n} from '@material-ui/core';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 400,\n    },\n  },\n};\n\nexport function SelectMultiple({ filterType, filterOptions, filters, group, applyFilters }) {\n  const activeFilters = filters.map((filter) => filter.name);\n  const [checked, setChecked] = useState([]);\n\n  // useEffect to update the filters when checked changes\n  useEffect(() => {\n    // Update filters based on the checked items\n    const updatedFilters = filterOptions.filter((option) => checked.includes(option));\n    setChecked(updatedFilters); // Set the checked state to the updated filters\n    applyFilters(); // Call applyFilters to propagate the changes\n  }, [checked, filterOptions, applyFilters]);\n\n  const handleChange = (value) => {\n    setChecked((prev) => {\n      // Check if the item is already in the checked state\n      if (prev.includes(value)) {\n        return prev.filter((item) => item !== value); // Remove it\n      } else {\n        return [...prev, value]; // Add it\n      }\n    });\n  };\n\n  return (\n    <div style={{ margin: '20px 20px 20px 0' }}>\n      <FormControl fullWidth>\n        <InputLabel style={{ paddingLeft: 10 }}>{filterType}</InputLabel>\n        <Select\n          multiple\n          value={checked} // Change here to reflect checked state\n          input={<OutlinedInput label={filterType} />}\n          renderValue={(selected) => selected.join(', ')} // Display selected items\n          MenuProps={MenuProps}\n        >\n          {filterOptions.map((type) => (\n            <MenuItem key={type} value={type}>\n              <Checkbox checked={checked.indexOf(type) > -1} onChange={() => handleChange(type)} />\n              <ListItemText primary={type} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}