{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  '18': [{\n    'type': 'Flood and sea level rise > Coastal flood',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Storm surge',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '159': [{\n    'type': 'Biological hazards > Vector-borne disease',\n    'probability': 'Medium Low',\n    'magnitude': 'High'\n  }, {\n    'type': 'Wild fire > Forest fire',\n    'probability': 'Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme cold temperature > Cold wave',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Severe wind',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Mass movement > Subsidence',\n    'probability': 'Medium',\n    'magnitude': 'Medium Low'\n  }, {\n    'type': 'Extreme cold temperature > Extreme cold days',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Flood and sea level rise > River flood',\n    'probability': 'Medium',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Water Scarcity > Drought',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '163': [{\n    'type': 'Flood and sea level rise > Flash / surface flood',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'High',\n    'magnitude': 'High'\n  }]\n};\nconst cities_coordinates = {\n  '18': {\n    'lat': 55.67613,\n    'lng': 12.56571\n  },\n  '159': {\n    'lat': 48.8787676,\n    'lng': 2.3222643\n  },\n  '163': {\n    'lat': 50.8705213,\n    'lng': 7.069748\n  }\n};\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState({});\n  const [hazards, setHazards] = useState();\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n  const GROUP = {\n    'HAZARD': 'hazard' // Add other groups here if needed\n\n  };\n  useEffect(() => {\n    // Filtering logic based on the filters\n    const filtered = Object.keys(data).reduce((acc, cityId) => {\n      const hazards = data[cityId];\n      const matches = hazards.some(hazard => {\n        const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type);\n        const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.includes(hazard.magnitude);\n        const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.includes(hazard.probability);\n        return matchesType && matchesMagnitude && matchesProbability;\n      });\n\n      if (matches) {\n        acc[cityId] = cities_coordinates[cityId];\n      }\n\n      return acc;\n    }, {});\n    setFilteredCities(filtered);\n  }, [typeFilters, magnitudeFilters, probabilityFilters]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Hazard Filter\",\n        filterOptions: HAZARDTYPES,\n        filters: typeFilters,\n        setFilters: setTypeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Probability Filter\",\n        filterOptions: PROBABILITY,\n        filters: probabilityFilters,\n        setFilters: setProbabilityFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Magnitude Filter\",\n        filterOptions: MAGNITUDE,\n        filters: magnitudeFilters,\n        setFilters: setMagnitudeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        data: filtered_cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hTu+u3SZVpTsfq18MizxTxljvXQ=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/App.js"],"names":["React","useEffect","useState","Grid","Map","SelectMultiple","HAZARDTYPES","PROBABILITY","MAGNITUDE","data","cities_coordinates","App","cities","setCities","hazards","setHazards","typeFilters","setTypeFilters","magnitudeFilters","setMagnitudeFilters","probabilityFilters","setProbabilityFilters","filtered_cities","setFilteredCities","GROUP","filtered","Object","keys","reduce","acc","cityId","matches","some","hazard","matchesType","length","includes","type","matchesMagnitude","magnitude","matchesProbability","probability"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\n\nconst data = {\n  '18': [\n    { 'type': 'Flood and sea level rise > Coastal flood', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Storm and wind > Storm surge', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Extreme hot temperature > Heat wave', 'probability': 'Medium', 'magnitude': 'Medium' },\n    { 'type': 'Extreme Precipitation > Rain storm', 'probability': 'High', 'magnitude': 'High' }\n  ],\n  '159': [\n    { 'type': 'Biological hazards > Vector-borne disease', 'probability': 'Medium Low', 'magnitude': 'High' },\n    { 'type': 'Wild fire > Forest fire', 'probability': 'Low', 'magnitude': 'Medium' },\n    { 'type': 'Extreme cold temperature > Cold wave', 'probability': 'Medium Low', 'magnitude': 'Medium' },\n    { 'type': 'Storm and wind > Severe wind', 'probability': 'Medium', 'magnitude': 'Medium High' },\n    { 'type': 'Mass movement > Subsidence', 'probability': 'Medium', 'magnitude': 'Medium Low' },\n    { 'type': 'Extreme cold temperature > Extreme cold days', 'probability': 'Medium Low', 'magnitude': 'Medium High' },\n    { 'type': 'Flood and sea level rise > River flood', 'probability': 'Medium', 'magnitude': 'High' },\n    { 'type': 'Extreme Precipitation > Rain storm', 'probability': 'Medium', 'magnitude': 'Medium High' },\n    { 'type': 'Water Scarcity > Drought', 'probability': 'Medium High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'Medium High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High' }\n  ],\n  '163': [\n    { 'type': 'Flood and sea level rise > Flash / surface flood', 'probability': 'High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High' },\n    { 'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'High', 'magnitude': 'High' }\n  ]\n};\n\nconst cities_coordinates = {\n  '18': { 'lat': 55.67613, 'lng': 12.56571 },\n  '159': { 'lat': 48.8787676, 'lng': 2.3222643 },\n  '163': { 'lat': 50.8705213, 'lng': 7.069748 }\n};\n\nexport default function App() {\n  const [cities, setCities] = useState({});\n  const [hazards, setHazards] = useState();\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n\n  const GROUP = {\n    'HAZARD': 'hazard',\n    // Add other groups here if needed\n  };\n\n  useEffect(() => {\n    // Filtering logic based on the filters\n    const filtered = Object.keys(data).reduce((acc, cityId) => {\n      const hazards = data[cityId];\n      const matches = hazards.some(hazard => {\n        const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type);\n        const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.includes(hazard.magnitude);\n        const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.includes(hazard.probability);\n        return matchesType && matchesMagnitude && matchesProbability;\n      });\n\n      if (matches) {\n        acc[cityId] = cities_coordinates[cityId];\n      }\n      return acc;\n    }, {});\n    setFilteredCities(filtered);\n  }, [typeFilters, magnitudeFilters, probabilityFilters]);\n\n  return (\n    <Grid container>\n      <Grid item lg={2}>\n        <SelectMultiple\n          filterType={\"Hazard Filter\"}\n          filterOptions={HAZARDTYPES}\n          filters={typeFilters}\n          setFilters={setTypeFilters}\n        />\n      </Grid>\n      <Grid item lg={2}>\n        <SelectMultiple\n          filterType={\"Probability Filter\"}\n          filterOptions={PROBABILITY}\n          filters={probabilityFilters}\n          setFilters={setProbabilityFilters}\n        />\n      </Grid>\n      <Grid item lg={2}>\n        <SelectMultiple\n          filterType={\"Magnitude Filter\"}\n          filterOptions={MAGNITUDE}\n          filters={magnitudeFilters}\n          setFilters={setMagnitudeFilters}\n        />\n      </Grid>\n      <Grid item lg={12}>\n        <Map data={filtered_cities} />\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}