{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  '18': [{\n    'type': 'Flood and sea level rise > Coastal flood',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Storm surge',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '159': [{\n    'type': 'Biological hazards > Vector-borne disease',\n    'probability': 'Medium Low',\n    'magnitude': 'High'\n  }, {\n    'type': 'Wild fire > Forest fire',\n    'probability': 'Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme cold temperature > Cold wave',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Severe wind',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Mass movement > Subsidence',\n    'probability': 'Medium',\n    'magnitude': 'Medium Low'\n  }, {\n    'type': 'Extreme cold temperature > Extreme cold days',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Flood and sea level rise > River flood',\n    'probability': 'Medium',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Water Scarcity > Drought',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '163': [{\n    'type': 'Flood and sea level rise > Flash / surface flood',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'High',\n    'magnitude': 'High'\n  }]\n};\nconst cities_coordinates = {\n  '18': {\n    'lat': 55.67613,\n    'lng': 12.56571\n  },\n  '159': {\n    'lat': 48.8787676,\n    'lng': 2.3222643\n  },\n  '163': {\n    'lat': 50.8705213,\n    'lng': 7.069748\n  }\n};\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState({});\n  const [hazards, setHazards] = useState();\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n  const GROUP = {\n    HAZARD: \"hazard\",\n    PROBABILITY: \"probability\",\n    MAGNITUDE: \"magnitude\"\n  };\n  useEffect(() => {//here???\n  }, [typeFilters]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Hazard Filter\",\n        filterOptions: HAZARDTYPES,\n        filters: typeFilters,\n        setFilters: setTypeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Probability Filter\",\n        filterOptions: PROBABILITY,\n        filters: probabilityFilters,\n        setFilters: setProbabilityFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Magnitude Filter\",\n        filterOptions: MAGNITUDE,\n        filters: magnitudeFilters,\n        setFilters: setMagnitudeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        data: filtered_cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"hTu+u3SZVpTsfq18MizxTxljvXQ=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/App.js"],"names":["React","useEffect","useState","Grid","Map","SelectMultiple","HAZARDTYPES","PROBABILITY","MAGNITUDE","data","cities_coordinates","App","cities","setCities","hazards","setHazards","typeFilters","setTypeFilters","magnitudeFilters","setMagnitudeFilters","probabilityFilters","setProbabilityFilters","filtered_cities","setFilteredCities","GROUP","HAZARD"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Grid} from '@material-ui/core'\nimport {Map} from './Map'\nimport {SelectMultiple} from './SelectMultiple'\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\n\nconst data = {'18': [\n                    {'type': 'Flood and sea level rise > Coastal flood', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Storm surge', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n              '159': [\n                    {'type': 'Biological hazards > Vector-borne disease', 'probability': 'Medium Low', 'magnitude': 'High'}, \n                    {'type': 'Wild fire > Forest fire', 'probability': 'Low', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme cold temperature > Cold wave', 'probability': 'Medium Low', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Severe wind', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Mass movement > Subsidence', 'probability': 'Medium', 'magnitude': 'Medium Low'}, \n                    {'type': 'Extreme cold temperature > Extreme cold days', 'probability': 'Medium Low', 'magnitude': 'Medium High'}, \n                    {'type': 'Flood and sea level rise > River flood', 'probability': 'Medium', 'magnitude': 'High'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Water Scarcity > Drought', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}], \n              '163': [\n                    {'type': 'Flood and sea level rise > Flash / surface flood', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n            }\nconst cities_coordinates = {'18':  {'lat': 55.67613, 'lng': 12.56571},\n                            '159': {'lat': 48.8787676, 'lng': 2.3222643},\n                            '163': {'lat': 50.8705213, 'lng': 7.069748}\n                            }\n\n\nexport default function App() {\n    const [cities, setCities] = useState({})\n    const [hazards, setHazards] = useState()\n    const [typeFilters, setTypeFilters] = useState([])\n    const [magnitudeFilters, setMagnitudeFilters] = useState([])\n    const [probabilityFilters, setProbabilityFilters] = useState([])\n    const [filtered_cities, setFilteredCities] = useState({})\n\n    const GROUP = {\n        HAZARD: \"hazard\",\n        PROBABILITY: \"probability\",\n        MAGNITUDE: \"magnitude\",\n    };\n\n   \n\n    useEffect(() => {\n        //here???\n\n\n    },[typeFilters])\n\n\n    return (\n        <Grid container>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Hazard Filter\"} filterOptions={HAZARDTYPES} filters={typeFilters} setFilters={setTypeFilters}/>\n            </Grid>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Probability Filter\"} filterOptions={PROBABILITY} filters={probabilityFilters} setFilters={setProbabilityFilters}/> \n            </Grid>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Magnitude Filter\"} filterOptions={MAGNITUDE} filters={magnitudeFilters} setFilters={setMagnitudeFilters}/>   \n            </Grid>\n            <Grid item lg={12}>\n                <Map data={filtered_cities}/>\n            </Grid>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}