{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from '@material-ui/core';\nimport { Map } from './Map';\nimport { SelectMultiple } from './SelectMultiple';\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  '18': [{\n    'type': 'Flood and sea level rise > Coastal flood',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Storm surge',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'Medium',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '159': [{\n    'type': 'Biological hazards > Vector-borne disease',\n    'probability': 'Medium Low',\n    'magnitude': 'High'\n  }, {\n    'type': 'Wild fire > Forest fire',\n    'probability': 'Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Extreme cold temperature > Cold wave',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium'\n  }, {\n    'type': 'Storm and wind > Severe wind',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Mass movement > Subsidence',\n    'probability': 'Medium',\n    'magnitude': 'Medium Low'\n  }, {\n    'type': 'Extreme cold temperature > Extreme cold days',\n    'probability': 'Medium Low',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Flood and sea level rise > River flood',\n    'probability': 'Medium',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme Precipitation > Rain storm',\n    'probability': 'Medium',\n    'magnitude': 'Medium High'\n  }, {\n    'type': 'Water Scarcity > Drought',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'Medium High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }],\n  '163': [{\n    'type': 'Flood and sea level rise > Flash / surface flood',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Heat wave',\n    'probability': 'High',\n    'magnitude': 'High'\n  }, {\n    'type': 'Extreme hot temperature > Extreme hot days',\n    'probability': 'High',\n    'magnitude': 'High'\n  }]\n};\nconst cities_coordinates = {\n  '18': {\n    'lat': 55.67613,\n    'lng': 12.56571\n  },\n  '159': {\n    'lat': 48.8787676,\n    'lng': 2.3222643\n  },\n  '163': {\n    'lat': 50.8705213,\n    'lng': 7.069748\n  }\n};\n\nconst splitValues = value => value.split(' ').map(val => val.trim());\n\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState(cities_coordinates);\n  const [hazards, setHazards] = useState(data);\n  const [typeFilters, setTypeFilters] = useState([]);\n  const [magnitudeFilters, setMagnitudeFilters] = useState([]);\n  const [probabilityFilters, setProbabilityFilters] = useState([]);\n  const [filtered_cities, setFilteredCities] = useState({});\n  useEffect(() => {\n    const applyFilters = () => {\n      const filtered = Object.keys(hazards).reduce((setCities, cityId) => {\n        const cityHazards = hazards[cityId];\n        const matchesFilters = cityHazards.some(hazard => {\n          const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type); // Split the magnitude and probability to check against filters\n\n          const hazardMagnitudes = splitValues(hazard.magnitude);\n          const hazardProbabilities = splitValues(hazard.probability);\n          const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.some(filter => hazardMagnitudes.includes(filter));\n          const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.some(filter => hazardProbabilities.includes(filter));\n          return matchesType && matchesMagnitude && matchesProbability;\n        });\n\n        if (matchesFilters) {\n          setCities[cityId] = cities[cityId];\n        }\n\n        return acc;\n      }, {});\n      setFilteredCities(filtered);\n    };\n\n    applyFilters();\n  }, [typeFilters, magnitudeFilters, probabilityFilters, hazards]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Hazard Filter\",\n        filterOptions: HAZARDTYPES,\n        filters: typeFilters,\n        setFilters: setTypeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Probability Filter\",\n        filterOptions: PROBABILITY,\n        filters: probabilityFilters,\n        setFilters: setProbabilityFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(SelectMultiple, {\n        filterType: \"Magnitude Filter\",\n        filterOptions: MAGNITUDE,\n        filters: magnitudeFilters,\n        setFilters: setMagnitudeFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Map, {\n        data: filtered_cities\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"Kcpn+wIRtFMFDU1qaNifNxBntiM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/App.js"],"names":["React","useEffect","useState","Grid","Map","SelectMultiple","HAZARDTYPES","PROBABILITY","MAGNITUDE","data","cities_coordinates","splitValues","value","split","map","val","trim","App","cities","setCities","hazards","setHazards","typeFilters","setTypeFilters","magnitudeFilters","setMagnitudeFilters","probabilityFilters","setProbabilityFilters","filtered_cities","setFilteredCities","applyFilters","filtered","Object","keys","reduce","cityId","cityHazards","matchesFilters","some","hazard","matchesType","length","includes","type","hazardMagnitudes","magnitude","hazardProbabilities","probability","matchesMagnitude","filter","matchesProbability","acc"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Grid} from '@material-ui/core'\nimport {Map} from './Map'\nimport {SelectMultiple} from './SelectMultiple'\nimport { HAZARDTYPES, PROBABILITY, MAGNITUDE } from \"./options\";\n\nconst data = {'18': [\n                    {'type': 'Flood and sea level rise > Coastal flood', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Storm surge', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'Medium', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n              '159': [\n                    {'type': 'Biological hazards > Vector-borne disease', 'probability': 'Medium Low', 'magnitude': 'High'}, \n                    {'type': 'Wild fire > Forest fire', 'probability': 'Low', 'magnitude': 'Medium'}, \n                    {'type': 'Extreme cold temperature > Cold wave', 'probability': 'Medium Low', 'magnitude': 'Medium'}, \n                    {'type': 'Storm and wind > Severe wind', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Mass movement > Subsidence', 'probability': 'Medium', 'magnitude': 'Medium Low'}, \n                    {'type': 'Extreme cold temperature > Extreme cold days', 'probability': 'Medium Low', 'magnitude': 'Medium High'}, \n                    {'type': 'Flood and sea level rise > River flood', 'probability': 'Medium', 'magnitude': 'High'}, \n                    {'type': 'Extreme Precipitation > Rain storm', 'probability': 'Medium', 'magnitude': 'Medium High'}, \n                    {'type': 'Water Scarcity > Drought', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'Medium High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}], \n              '163': [\n                    {'type': 'Flood and sea level rise > Flash / surface flood', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Heat wave', 'probability': 'High', 'magnitude': 'High'}, \n                    {'type': 'Extreme hot temperature > Extreme hot days', 'probability': 'High', 'magnitude': 'High'}\n                    ], \n            }\nconst cities_coordinates = {'18':  {'lat': 55.67613, 'lng': 12.56571},\n                            '159': {'lat': 48.8787676, 'lng': 2.3222643},\n                            '163': {'lat': 50.8705213, 'lng': 7.069748}\n                            }\nconst splitValues = (value) => value.split(' ').map(val => val.trim());\n\nexport default function App() {\n    const [cities, setCities] = useState(cities_coordinates)\n    const [hazards, setHazards] = useState(data)\n    const [typeFilters, setTypeFilters] = useState([])\n    const [magnitudeFilters, setMagnitudeFilters] = useState([])\n    const [probabilityFilters, setProbabilityFilters] = useState([])\n    const [filtered_cities, setFilteredCities] = useState({})\n\n    useEffect(() => {\n        const applyFilters = () => {\n            const filtered = Object.keys(hazards).reduce((setCities, cityId) => {\n                const cityHazards = hazards[cityId];\n                const matchesFilters = cityHazards.some(hazard => {\n                    const matchesType = typeFilters.length === 0 || typeFilters.includes(hazard.type);\n                    \n                    // Split the magnitude and probability to check against filters\n                    const hazardMagnitudes = splitValues(hazard.magnitude);\n                    const hazardProbabilities = splitValues(hazard.probability);\n                    \n                    const matchesMagnitude = magnitudeFilters.length === 0 || magnitudeFilters.some(filter => hazardMagnitudes.includes(filter));\n                    const matchesProbability = probabilityFilters.length === 0 || probabilityFilters.some(filter => hazardProbabilities.includes(filter));\n\n                    return matchesType && matchesMagnitude && matchesProbability;\n                });\n\n                if (matchesFilters) {\n                    setCities[cityId] = cities[cityId];\n                }\n                return acc;\n            }, {});\n            setFilteredCities(filtered);\n        };\n\n        applyFilters();\n    }, [typeFilters, magnitudeFilters, probabilityFilters, hazards]);\n\n\n    return (\n        <Grid container>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Hazard Filter\"} filterOptions={HAZARDTYPES} filters={typeFilters} setFilters={setTypeFilters}/>\n            </Grid>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Probability Filter\"} filterOptions={PROBABILITY} filters={probabilityFilters} setFilters={setProbabilityFilters}/> \n            </Grid>\n            <Grid item lg={2}>\n                <SelectMultiple filterType={\"Magnitude Filter\"} filterOptions={MAGNITUDE} filters={magnitudeFilters} setFilters={setMagnitudeFilters}/>   \n            </Grid>\n            <Grid item lg={12}>\n                <Map data={filtered_cities}/>\n            </Grid>\n        </Grid>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}