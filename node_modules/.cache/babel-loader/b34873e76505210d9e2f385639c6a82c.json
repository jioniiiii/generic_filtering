{"ast":null,"code":"var _jsxFileName = \"/home/nisgia/Desktop/generic_filtering/src/SelectMultiple.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { OutlinedInput, InputLabel, MenuItem, FormControl, ListItemText, Select, Checkbox } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 400\n    }\n  }\n};\nexport function SelectMultiple(_ref) {\n  _s();\n\n  let {\n    filterType,\n    filterOptions,\n    filters,\n    setfilters\n  } = _ref;\n  const activeFilters = filters.map((filter, i) => filter.name);\n  const [checked, setChecked] = useState([activeFilters]);\n  useEffect(() => {\n    if (checked) {\n      // Find if the item is already in filters\n      const isAlreadyFiltered = filters.some(filter => filter.name === checked);\n\n      if (isAlreadyFiltered) {\n        // If checked item exists, remove it\n        const newFilters = filters.filter(filter => filter.name !== checked);\n        applyFilters(newFilters);\n      } else {\n        // If checked item doesn't exist, add it\n        const newFilters = [...filters, {\n          name: checked,\n          group: group\n        }];\n        applyFilters(newFilters);\n      }\n    }\n  }, [checked]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '20px 20px 20px 0'\n    },\n    children: /*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        style: {\n          paddingLeft: 10\n        },\n        children: filterType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        multiple: true,\n        onClose: applyFilters,\n        value: filters.map((item, i) => item.group === group && item.name),\n        input: /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          label: filterType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 18\n        }, this),\n        renderValue: selected => selected,\n        MenuProps: MenuProps,\n        children: filterOptions.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: type,\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: activeFilters.indexOf(type) > -1,\n            onChange: e => setChecked(type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SelectMultiple, \"T1+k3UzDiXmNY0w2LnAmf8b+sjs=\");\n\n_c = SelectMultiple;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectMultiple\");","map":{"version":3,"sources":["/home/nisgia/Desktop/generic_filtering/src/SelectMultiple.js"],"names":["React","useEffect","useState","OutlinedInput","InputLabel","MenuItem","FormControl","ListItemText","Select","Checkbox","ITEM_HEIGHT","ITEM_PADDING_TOP","MenuProps","PaperProps","style","maxHeight","width","SelectMultiple","filterType","filterOptions","filters","setfilters","activeFilters","map","filter","i","name","checked","setChecked","isAlreadyFiltered","some","newFilters","applyFilters","group","margin","paddingLeft","item","selected","type","indexOf","e"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {OutlinedInput, \n  InputLabel, \n  MenuItem, \n  FormControl, \n  ListItemText,\n  Select,\n  Checkbox,\n} from '@material-ui/core';\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 400,\n    },\n  },\n};\n\nexport function SelectMultiple({ filterType, filterOptions, filters, setfilters }) {\n  const activeFilters = filters.map((filter, i) => filter.name);\n  const [checked, setChecked] = useState([activeFilters])\n\n  useEffect(() => {\n    if (checked) {\n      // Find if the item is already in filters\n      const isAlreadyFiltered = filters.some(filter => filter.name === checked);\n      \n      if (isAlreadyFiltered) {\n        // If checked item exists, remove it\n        const newFilters = filters.filter(filter => filter.name !== checked);\n        applyFilters(newFilters);\n      } else {\n        // If checked item doesn't exist, add it\n        const newFilters = [...filters, { name: checked, group: group }];\n        applyFilters(newFilters);\n      }\n    }\n  }, [checked]);\n\n\n  return (\n    <div style={{margin: '20px 20px 20px 0'}}>\n      <FormControl fullWidth>\n        <InputLabel style={{paddingLeft: 10}}>{ filterType }</InputLabel>\n        <Select\n          multiple\n          onClose={applyFilters}\n          value={filters.map((item, i) => item.group === group && item.name)}\n          input={<OutlinedInput label={ filterType } />}\n          renderValue={(selected) => selected}\n          MenuProps={MenuProps}\n        >\n          {filterOptions.map((type) => (\n            <MenuItem key={type} value={type}>\n              <Checkbox checked={activeFilters.indexOf(type) > -1} onChange={(e) => setChecked(type)}/>\n              <ListItemText primary={type} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}